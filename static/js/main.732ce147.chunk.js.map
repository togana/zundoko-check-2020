{"version":3,"sources":["features/kiyoshi/kiyoshiSlice.js","features/kiyoshi/Kiyoshi.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["kiyoshiSlice","createSlice","name","initialState","value","river","music","reducers","zun","state","push","doko","kiyoshi","actions","singsong","dispatch","getState","setTimeout","Math","random","selectRiver","Kiyoshi","useSelector","useDispatch","success","toString","useEffect","slice","map","item","i","key","App","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAEaA,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,CACLC,MAAO,GACPC,OAAO,IAGXC,SAAU,CACRC,IAAK,SAAAC,GACHA,EAAML,MAAMC,MAAMK,KAAK,iBAEzBC,KAAM,SAAAF,GACJA,EAAML,MAAMC,MAAMK,KAAK,iBAEzBE,QAAS,SAAAH,GACPA,EAAML,MAAMC,MAAMK,KAAK,wCACvBD,EAAML,MAAME,OAAQ,M,EAKYN,EAAaa,QAApCL,E,EAAAA,IAAKG,E,EAAAA,KAAMC,E,EAAAA,QAYbE,EAAW,kBAAM,SAACC,EAAUC,GACnBA,IAAZJ,QACGR,MAAME,OACfW,YAAW,WACTF,EAbG,GAAMG,KAAKC,SAAWX,IAAQG,OAchC,OAIMS,EAAc,SAAAX,GAAK,OAAIA,EAAMG,QAAQR,MAAMC,OAEzCL,IAAf,QCvCO,SAASqB,IACd,IAAMhB,EAAQiB,YAAYF,GACpBL,EAAWQ,cACXC,EAAU,CAAC,eAAM,eAAM,eAAM,eAAM,gBAAMC,WAa/C,OAXAC,qBAAU,WACMrB,EAAMsB,OAAO,GAAGF,aAEhBD,EAKdT,EAASD,KAJPC,GDaoB,SAAAA,GACxBE,YAAW,WACTF,EAASH,OACR,UCXA,CAACP,EAAOmB,EAAST,IAGlB,6BACGV,EAAMuB,KAAI,SAACC,EAAMC,GAAP,OACT,0BAAMC,IAAKD,GAAID,OChBRG,MARf,WACE,OACE,6BACE,kBAACX,EAAD,QCHSY,cAAe,CAC5BC,QAAS,CACPtB,QAASZ,KCOOmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.732ce147.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const kiyoshiSlice = createSlice({\n  name: 'kiyoshi',\n  initialState: {\n    value: {\n      river: [],\n      music: true,\n    },\n  },\n  reducers: {\n    zun: state => {\n      state.value.river.push('ズン');\n    },\n    doko: state => {\n      state.value.river.push('ドコ');\n    },\n    kiyoshi: state => {\n      state.value.river.push('キ・ヨ・シ！');\n      state.value.music = false;\n    },\n  },\n});\n\nexport const { zun, doko, kiyoshi } = kiyoshiSlice.actions;\n\nconst sing = () => {\n  return 0.5 < Math.random() ? zun() : doko();\n}\n\nexport const stop = () => dispatch => {\n  setTimeout(() => {\n    dispatch(kiyoshi());\n  }, 750);\n};\n\nexport const singsong = () => (dispatch, getState) => {\n  const { kiyoshi } = getState();\n  if(kiyoshi.value.music) {\n    setTimeout(() => {\n      dispatch(sing());\n    }, 750);\n  }\n};\n\nexport const selectRiver = state => state.kiyoshi.value.river;\n\nexport default kiyoshiSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectRiver,\n  singsong,\n  stop,\n} from './kiyoshiSlice';\n\nexport function Kiyoshi() {\n  const river = useSelector(selectRiver);\n  const dispatch = useDispatch();\n  const success = ['ズン', 'ズン', 'ズン', 'ズン', 'ドコ'].toString();\n\n  useEffect(() => {\n    const check = river.slice(-5).toString();\n\n    if (check === success) {\n      dispatch(stop());\n      return;\n    }\n\n    dispatch(singsong());\n  }, [river, success, dispatch]);\n\n  return (\n    <div>\n      {river.map((item, i) =>\n        <span key={i}>{item}</span>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\r\nimport { Kiyoshi } from './features/kiyoshi/Kiyoshi';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Kiyoshi />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport kiyoshiSlice from '../features/kiyoshi/kiyoshiSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    kiyoshi: kiyoshiSlice,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}